kind: pipeline
type: docker
name: default

# 禁用默认克隆
clone:
  disable: true
  
steps:
  - name: clone_source
    image: drone/git
    pull: if-not-exists
    privileged: true
    environment:
      HTTP_PROXY: http://10.10.13.56:7890
      HTTPS_PROXY: http://10.10.13.56:7890
      NO_PROXY: localhost,127.0.0.1,*.local,172.17.0.0/16,172.18.0.0/16,172.19.0.0/16,172.20.0.0/16,172.21.0.0/16,::1,192.168.0.0/24,10.10.0.0/16
    volumes:
    - name: dev-code
      path: /drone/code
    commands:
      # - env | grep -i http
      # - pwd
      # - ls -lah
      # - rm -rf /drone/src/.gradle
      # - ls -lah
      - echo "${DRONE_GIT_HTTP_URL} -> ${DRONE_BRANCH}"
      - git version
      - git clone -b ${DRONE_BRANCH} --single-branch ${DRONE_GIT_HTTP_URL} ./
      # - git checkout ${DRONE_BRANCH}
      - git status
      # - pwd
      # - ls -lah
      - git diff --name-only HEAD~ HEAD | grep '/' |grep -v '"' | grep -v '^sql'| awk -F "/" '{print $1}'| uniq >> /drone/src/modules
      - cat /drone/src/modules | sort | uniq
    when:
      branch:
        - feature_1130_ci
        - dev
        - test
        - main

  - name: maven_build
    image: maven:3.8.5-openjdk-17
    depends_on: [clone_source]
    volumes:
      - name: maven-cache
        path: /root/.m2/repository
      - name: maven-build
        path: /app/build
    commands:
      - mvn install -DskipTests=true -Dmaven.javadoc.skip=true
      - cp /drone/src/target/*.jar /app/build/boot-demo.jar
      - cp Dockerfile /app/build/

  - name: build_image_push
    image: plugins/docker
    depends_on: [maven_build]
    volumes:
      - name: docker-sock
        path: /var/run/docker.sock
      - name: maven-build
        path: /app/build
    settings:
      # context: ./app   # 指定项目所在目录的路径，即包含 Dockerfile 所处的目录
      # dockerfile: ./app/Dockerfile   # Dockerfile 文件所处的位置
      context: /app/build
      dockerfile: /app/build/Dockerfile
      registry: ccr.ccs.tencentyun.com 
      repo:  ccr.ccs.tencentyun.com/lyy-demo/boot-demo
      auto_tag: true
      insecure: true
      tags: latest   # 标签，可以是版本号或其他标识符
      pull_image: false
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password

  - name: clear_image  # 清理镜像
    image: docker:latest
    depends_on: [build_image_push]
    volumes:
      - name: docker-sock
        path: /var/run/docker.sock
    commands:
      - docker images --filter=reference='ccr.ccs.tencentyun.com/lyy-demo/boot-demo:*' --format '{{.ID}}' | xargs -I {} docker rmi -f - {}   # 加 -f 强制删除

  - name: deploy
    # image: drone/drone-runner-ssh:latest
    image: appleboy/drone-ssh
    pull: true
    depends_on: [build_image_push]
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password
    settings:
      host: 10.10.10.59
      port: 22
      username: tgy
      password:
        from_secret: server_password
      command_timeout: 2m
      tty: false  # 禁用TTY
      script:
        - echo ====开始部署====
        - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD ccr.ccs.tencentyun.com
        - docker pull ccr.ccs.tencentyun.com/lyy-demo/boot-demo:latest
        - docker stop boot-demo
        - docker rm boot-demo
        - docker run -d --name boot-demo -p 8000:8080 ccr.ccs.tencentyun.com/lyy-demo/boot-demo:latest
        # - docker-compose up -d
        - echo ====部署成功====
      
volumes:
  - name: docker-sock
    host:
      path: /var/run/docker.sock
  - name: maven-cache
    host:
      path: /data/drone/repository
  - name: maven-build
    host:
      path: /data/drone/maven-build

# 可限制哪些分支可以推送自动 CICD
trigger:
    branch:
      - main
  #ref:
  #  - refs/tags/*
  #  - refs/heads/master
